//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SCMPT
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SCMPTEntities3 : DbContext
    {
        public SCMPTEntities3()
            : base("name=SCMPTEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Citas> Citas { get; set; }
        public virtual DbSet<Detalles_Cita> Detalles_Cita { get; set; }
        public virtual DbSet<Doctor> Doctor { get; set; }
        public virtual DbSet<Lista_examenes> Lista_examenes { get; set; }
        public virtual DbSet<Noticia> Noticia { get; set; }
        public virtual DbSet<Paciente> Paciente { get; set; }
        public virtual DbSet<Persona> Persona { get; set; }
        public virtual DbSet<Resultado_examen> Resultado_examen { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Imagenes> Imagenes { get; set; }
    
        public virtual int admina(string id, string user, string primer_Nombre, string segundo_Nombre, string primer_Apellido, string segundo_Apellido, Nullable<System.DateTime> fecha_Nacimiento, string genero, string cedula, Nullable<int> telefono, string email)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var primer_NombreParameter = primer_Nombre != null ?
                new ObjectParameter("Primer_Nombre", primer_Nombre) :
                new ObjectParameter("Primer_Nombre", typeof(string));
    
            var segundo_NombreParameter = segundo_Nombre != null ?
                new ObjectParameter("Segundo_Nombre", segundo_Nombre) :
                new ObjectParameter("Segundo_Nombre", typeof(string));
    
            var primer_ApellidoParameter = primer_Apellido != null ?
                new ObjectParameter("Primer_Apellido", primer_Apellido) :
                new ObjectParameter("Primer_Apellido", typeof(string));
    
            var segundo_ApellidoParameter = segundo_Apellido != null ?
                new ObjectParameter("Segundo_Apellido", segundo_Apellido) :
                new ObjectParameter("Segundo_Apellido", typeof(string));
    
            var fecha_NacimientoParameter = fecha_Nacimiento.HasValue ?
                new ObjectParameter("Fecha_Nacimiento", fecha_Nacimiento) :
                new ObjectParameter("Fecha_Nacimiento", typeof(System.DateTime));
    
            var generoParameter = genero != null ?
                new ObjectParameter("Genero", genero) :
                new ObjectParameter("Genero", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("admina", idParameter, userParameter, primer_NombreParameter, segundo_NombreParameter, primer_ApellidoParameter, segundo_ApellidoParameter, fecha_NacimientoParameter, generoParameter, cedulaParameter, telefonoParameter, emailParameter);
        }
    
        public virtual int NuevoUsuario(string id, string primer_Nombre, string segundo_Nombre, string primer_Apellido, string segundo_Apellido, Nullable<System.DateTime> fecha_Nacimiento, string genero, string cedula, Nullable<int> telefono, string email, string especialidad, Nullable<int> tipo)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var primer_NombreParameter = primer_Nombre != null ?
                new ObjectParameter("Primer_Nombre", primer_Nombre) :
                new ObjectParameter("Primer_Nombre", typeof(string));
    
            var segundo_NombreParameter = segundo_Nombre != null ?
                new ObjectParameter("Segundo_Nombre", segundo_Nombre) :
                new ObjectParameter("Segundo_Nombre", typeof(string));
    
            var primer_ApellidoParameter = primer_Apellido != null ?
                new ObjectParameter("Primer_Apellido", primer_Apellido) :
                new ObjectParameter("Primer_Apellido", typeof(string));
    
            var segundo_ApellidoParameter = segundo_Apellido != null ?
                new ObjectParameter("Segundo_Apellido", segundo_Apellido) :
                new ObjectParameter("Segundo_Apellido", typeof(string));
    
            var fecha_NacimientoParameter = fecha_Nacimiento.HasValue ?
                new ObjectParameter("Fecha_Nacimiento", fecha_Nacimiento) :
                new ObjectParameter("Fecha_Nacimiento", typeof(System.DateTime));
    
            var generoParameter = genero != null ?
                new ObjectParameter("Genero", genero) :
                new ObjectParameter("Genero", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var especialidadParameter = especialidad != null ?
                new ObjectParameter("Especialidad", especialidad) :
                new ObjectParameter("Especialidad", typeof(string));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NuevoUsuario", idParameter, primer_NombreParameter, segundo_NombreParameter, primer_ApellidoParameter, segundo_ApellidoParameter, fecha_NacimientoParameter, generoParameter, cedulaParameter, telefonoParameter, emailParameter, especialidadParameter, tipoParameter);
        }
    
        public virtual int ProgramarCita(Nullable<int> idcita, Nullable<int> idpaciente, Nullable<int> iddoctor, Nullable<System.DateTime> fecha, Nullable<System.TimeSpan> hora, Nullable<bool> asistida, Nullable<int> query)
        {
            var idcitaParameter = idcita.HasValue ?
                new ObjectParameter("Idcita", idcita) :
                new ObjectParameter("Idcita", typeof(int));
    
            var idpacienteParameter = idpaciente.HasValue ?
                new ObjectParameter("Idpaciente", idpaciente) :
                new ObjectParameter("Idpaciente", typeof(int));
    
            var iddoctorParameter = iddoctor.HasValue ?
                new ObjectParameter("Iddoctor", iddoctor) :
                new ObjectParameter("Iddoctor", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var horaParameter = hora.HasValue ?
                new ObjectParameter("Hora", hora) :
                new ObjectParameter("Hora", typeof(System.TimeSpan));
    
            var asistidaParameter = asistida.HasValue ?
                new ObjectParameter("Asistida", asistida) :
                new ObjectParameter("Asistida", typeof(bool));
    
            var queryParameter = query.HasValue ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProgramarCita", idcitaParameter, idpacienteParameter, iddoctorParameter, fechaParameter, horaParameter, asistidaParameter, queryParameter);
        }
    }
}
